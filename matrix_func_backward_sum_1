import numpy as np
from typing import List, Callable

# np.ndarray를 인자로 받고 np.ndarray를 반환하는 함수
Array_Function = Callable[[np.ndarray], np.ndarray]

# Chain은 함수의 리스트다.
Chain = List[Array_Function]

def matrix_function_backward_sum_1(X: np.ndarray, W: np.ndarray, sigma:Array_Funcion) -> np.ndarray:
    '''
    행렬곱과 요소의 합 연산이 포함된 함수의 
    첫 번째 인자 행렬에 대한 도함수를 계산하는 과정 구현
    '''
    assert X.shape[1] == W.shape[0]
    
    # 행렬곱
    N = np.dot(X, W)
    
    # 행렬곱 계산 결과를 sigma에 전달
    S = sigma(N)
    
    # 행렬 요소의 합을 구함
    L = np.sum(S)
    
    # 메모 : 수식에서 도함수를 가리키는 부분을 여기서는 계산된 값으로 다룬다.
    
    # dLdS - 모든 요솟값이 1인 행렬
    dLdS = np.ones_like(S)
    
    # dSdN
    dSdN = deriv(sigma, N)
    
    # dLdN
    dLdN = dLdS * dSdN
    
    # dNdX
    dNdX = np.transpose(W, (1,0))
    
    # dLdX
    dLdX = np.dot(dSdN, dNdX)
    
    return dLdX
